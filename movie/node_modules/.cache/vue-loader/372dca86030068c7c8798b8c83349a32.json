{"remainingRequest":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\Delta\\codes\\projects\\09\\movie\\src\\components\\movies\\MovieList.vue?vue&type=script&lang=js&","dependencies":[{"path":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\src\\components\\movies\\MovieList.vue","mtime":1573315710250},{"path":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1573310563934},{"path":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\node_modules\\babel-loader\\lib\\index.js","mtime":1573310563290},{"path":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1573310563934},{"path":"c:\\Users\\Delta\\codes\\projects\\09\\movie\\node_modules\\vue-loader\\lib\\index.js","mtime":1573310570603}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nconsole.log('MovieList - loaded')\r\n// 1-1. 저장되어 있는 MovieListItem 컴포넌트를 불러오고,\r\nimport MovieListItem from \"./MovieListItem\";\r\nexport default {\r\n  name: \"MovieList\",\r\n  // 1-2. 아래에 등록 후\r\n  components: {\r\n    MovieListItem\r\n  },\r\n  data() {\r\n    return {\r\n      // 활용할 데이터를 정의하시오.\r\n      selectedGenreId: 0,\r\n    };\r\n  },\r\n\r\n  // 0. props 데이터를 받이 위하여 설정하시오.\r\n  // genres와 movies 모두 타입은 Array이며, 필수입니다.\r\n  // 설정이 완료 되었다면, 상위 컴포넌트에서 값을 넘겨 주세요.\r\n  // 그리고 적절한 곳에 사용하세요.\r\n  props: {\r\n    movies: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    genres: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  // 2-3.에서 이야기하는 특정한 함수는 selectedGenreId의 값이 변경될 때마다 호출 됩니다.\r\n  // 드랍다운에서 장르를 선택하면, 해당 영화들만 보여주도록 구현 예정입니다.\r\n  // 주의할 것은 직접 부모 컴포넌트의 데이터를 변경할 수 없다는 점입니다.\r\n  // 완료 후\r\n  // watch:{\r\n  //   selectedGenre(event){\r\n  //     const genreID = this.genres.filter(function (object){\r\n  //       return object.name === event\r\n  //     })[0].id\r\n  //     this.selectedMovies = this.movies.filter(function (object){\r\n  //       return object.genre_id === genreID\r\n  //     })\r\n  //   }\r\n  // },\r\n  computed: {\r\n    selectedMovies () {\r\n      if (this.selectedGenreId > 0) {\r\n        return this.movies.filter((movies) => { return movies.genre_id === this.selectedGenreId })\r\n      }\r\n      return this.movies\r\n    }\r\n  }\r\n\r\n};\r\n",{"version":3,"sources":["MovieList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"MovieList.vue","sourceRoot":"src/components/movies","sourcesContent":["<template>\r\n  <div>\r\n    <h1>영화 목록</h1>\r\n    <h2>장르 선택</h2>\r\n    <!-- 2. 장르 선택(제일 마지막에 구현하시오.)\r\n    2-1. App 컴포넌트로 부터 받은 genres를 반복하여 드롭다운을 완성 해주세요.\r\n    2-2. 드롭다운은 selectedGenreId data와 양방향바인딩(v-model)이 됩니다.\r\n    2-3. 값 변경이 되면, 특정한 함수를 실행 해야합니다.-->\r\n    <select class=\"form-control\" v-model='selectedGenreId'>\r\n      <option value=0>전체보기</option>\r\n      <option v-for='genre in genres' :value=\"genre.id\" :key=\"genre.id\">\r\n        {{genre.name}}\r\n        </option>\r\n    </select>\r\n    <!-- Movie List Item -->\r\n      <div class=\"row mt-5\">\r\n        <MovieListItem :movie=\"movie\" v-for=\"movie in selectedMovies\" :key=\"movie.id\" />\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconsole.log('MovieList - loaded')\r\n// 1-1. 저장되어 있는 MovieListItem 컴포넌트를 불러오고,\r\nimport MovieListItem from \"./MovieListItem\";\r\nexport default {\r\n  name: \"MovieList\",\r\n  // 1-2. 아래에 등록 후\r\n  components: {\r\n    MovieListItem\r\n  },\r\n  data() {\r\n    return {\r\n      // 활용할 데이터를 정의하시오.\r\n      selectedGenreId: 0,\r\n    };\r\n  },\r\n\r\n  // 0. props 데이터를 받이 위하여 설정하시오.\r\n  // genres와 movies 모두 타입은 Array이며, 필수입니다.\r\n  // 설정이 완료 되었다면, 상위 컴포넌트에서 값을 넘겨 주세요.\r\n  // 그리고 적절한 곳에 사용하세요.\r\n  props: {\r\n    movies: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    genres: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  // 2-3.에서 이야기하는 특정한 함수는 selectedGenreId의 값이 변경될 때마다 호출 됩니다.\r\n  // 드랍다운에서 장르를 선택하면, 해당 영화들만 보여주도록 구현 예정입니다.\r\n  // 주의할 것은 직접 부모 컴포넌트의 데이터를 변경할 수 없다는 점입니다.\r\n  // 완료 후\r\n  // watch:{\r\n  //   selectedGenre(event){\r\n  //     const genreID = this.genres.filter(function (object){\r\n  //       return object.name === event\r\n  //     })[0].id\r\n  //     this.selectedMovies = this.movies.filter(function (object){\r\n  //       return object.genre_id === genreID\r\n  //     })\r\n  //   }\r\n  // },\r\n  computed: {\r\n    selectedMovies () {\r\n      if (this.selectedGenreId > 0) {\r\n        return this.movies.filter((movies) => { return movies.genre_id === this.selectedGenreId })\r\n      }\r\n      return this.movies\r\n    }\r\n  }\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\nselect {\r\n  display: block;\r\n  width: 50% !important;\r\n  margin: 2rem auto !important;\r\n}\r\n</style>"]}]}