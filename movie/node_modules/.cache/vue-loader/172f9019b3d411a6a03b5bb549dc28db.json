{"remainingRequest":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\student\\codes\\projects\\PJT09\\movie\\src\\components\\movies\\MovieList.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\src\\components\\movies\\MovieList.vue","mtime":1573204222870},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nselect {\n  display: block;\n  width: 50% !important;\n  margin: 2rem auto !important;\n}\n",{"version":3,"sources":["MovieList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;AACA","file":"MovieList.vue","sourceRoot":"src/components/movies","sourcesContent":["<template>\n  <div>\n    <h1>영화 목록</h1>\n    <h2>장르 선택</h2>\n    <!-- 2. 장르 선택(제일 마지막에 구현하시오.)\n    2-1. App 컴포넌트로 부터 받은 genres를 반복하여 드롭다운을 완성 해주세요.\n    2-2. 드롭다운은 selectedGenreId data와 양방향바인딩(v-model)이 됩니다.\n    2-3. 값 변경이 되면, 특정한 함수를 실행 해야합니다.-->\n    <select class=\"form-control\" id=\"selectedGenreId\" v-model='selectedGenre'>\n      <option v-for='genre in genres' :key='genre.id'>\n        {{genre.name}}\n        \n        </option>\n    </select>\n    <!-- Movie List Item -->\n      <div class=\"row mt-5\">\n    <!-- (나중에 마지막으로) selectedGenreId 값에 따른 분기를 해야 합니다.-->\n        <!-- {{ selectedMovies }}  -->\n        <MovieListItem v-if=\"selectedMovies===''\" :movie=\"movie\" v-for=\"movie in movies\" :key=\"movie.id\" />\n        <MovieListItem v-else :movie=\"selectedmovie\" v-for=\"selectedmovie in selectedMovies\" :key=\"movie.pk\" /> \n      </div>\n  </div>\n</template>\n\n<script>\nconsole.log('MovieList - loaded')\n// 1-1. 저장되어 있는 MovieListItem 컴포넌트를 불러오고,\nimport MovieListItem from \"./MovieListItem\";\nexport default {\n  name: \"MovieList\",\n  // 1-2. 아래에 등록 후\n  components: {\n    MovieListItem\n  },\n  data() {\n    return {\n      // 활용할 데이터를 정의하시오.\n      selectedMovies: '',\n      selectedGenre: '',\n    };\n  },\n\n  // 0. props 데이터를 받이 위하여 설정하시오.\n  // genres와 movies 모두 타입은 Array이며, 필수입니다.\n  // 설정이 완료 되었다면, 상위 컴포넌트에서 값을 넘겨 주세요.\n  // 그리고 적절한 곳에 사용하세요.\n  props: {\n    movies: {\n      type: Array,\n      required: true\n    },\n    genres: {\n      type: Array,\n      required: true\n    }\n  },\n  // 2-3.에서 이야기하는 특정한 함수는 selectedGenreId의 값이 변경될 때마다 호출 됩니다.\n  // 드랍다운에서 장르를 선택하면, 해당 영화들만 보여주도록 구현 예정입니다.\n  // 주의할 것은 직접 부모 컴포넌트의 데이터를 변경할 수 없다는 점입니다.\n  // 완료 후\n  watch:{\n    selectedGenre(event){\n      const genreID = this.genres.filter(function (object){\n        return object.name === event\n      })[0].id\n      this.selectedMovies = this.movies.filter(function (object){\n        return object.genre_id === genreID\n      })\n    }\n  },\n\n\n};\n</script>\n\n<style>\nselect {\n  display: block;\n  width: 50% !important;\n  margin: 2rem auto !important;\n}\n</style>"]}]}