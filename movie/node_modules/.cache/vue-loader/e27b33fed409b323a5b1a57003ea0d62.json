{"remainingRequest":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\student\\codes\\projects\\PJT09\\movie\\src\\components\\movies\\MovieList.vue?vue&type=template&id=3afe39dc&","dependencies":[{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\src\\components\\movies\\MovieList.vue","mtime":1573204222870},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\student\\codes\\projects\\PJT09\\movie\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div>\n  <h1>영화 목록</h1>\n  <h2>장르 선택</h2>\n  <!-- 2. 장르 선택(제일 마지막에 구현하시오.)\n  2-1. App 컴포넌트로 부터 받은 genres를 반복하여 드롭다운을 완성 해주세요.\n  2-2. 드롭다운은 selectedGenreId data와 양방향바인딩(v-model)이 됩니다.\n  2-3. 값 변경이 되면, 특정한 함수를 실행 해야합니다.-->\n  <select class=\"form-control\" id=\"selectedGenreId\" v-model='selectedGenre'>\n    <option v-for='genre in genres' :key='genre.id'>\n      {{genre.name}}\n      \n      </option>\n  </select>\n  <!-- Movie List Item -->\n    <div class=\"row mt-5\">\n  <!-- (나중에 마지막으로) selectedGenreId 값에 따른 분기를 해야 합니다.-->\n      <!-- {{ selectedMovies }}  -->\n      <MovieListItem v-if=\"selectedMovies===''\" :movie=\"movie\" v-for=\"movie in movies\" :key=\"movie.id\" />\n      <MovieListItem v-else :movie=\"selectedmovie\" v-for=\"selectedmovie in selectedMovies\" :key=\"movie.pk\" /> \n    </div>\n</div>\n",null]}